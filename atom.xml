<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>葬瞳飘血的博客</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://jianlin1993.github.io/"/>
  <updated>2019-05-06T10:04:47.775Z</updated>
  <id>https://jianlin1993.github.io/</id>
  
  <author>
    <name>葬瞳飘血</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>SpringBoot事务使用</title>
    <link href="https://jianlin1993.github.io/2019/05/06/SpringBoot%E4%BA%8B%E5%8A%A1%E4%BD%BF%E7%94%A8/"/>
    <id>https://jianlin1993.github.io/2019/05/06/SpringBoot事务使用/</id>
    <published>2019-05-06T09:25:57.000Z</published>
    <updated>2019-05-06T10:04:47.775Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Springboot中使用事务的方式："><a href="#Springboot中使用事务的方式：" class="headerlink" title="Springboot中使用事务的方式："></a>Springboot中使用事务的方式：</h3><ol><li><p>启动类加上<code>@EnableTransactionManagement</code>注解，开启事务支持（其实默认是开启的）。</p></li><li><p>在使用事务的<code>public</code>（只有public支持事务）方法（或者类-相当于该类的所有public方法都使用）加上<code>@Transactional</code>注解。</p></li><li><p>在实际使用中一般是在service(业务层)中使用<code>@Transactional</code>，那么对于controller-&gt;service流程中：<br> 如果controller未开启事务，service中开始了事务，service成功执行，controller在之后的运行中出现异常（错误），不会自动回滚。<br> 也就是说，只有在开启事务的方法中出现异常（默认只有非检测性异常才生效-RuntimeException ）（错误-Error）才会自动回滚。<br> 如果想要对抛出的任何异常都进行自动回滚（而不是只针对RuntimeException），只需要在使用<code>@Transactional(rollbackFor = Exception.class)</code>即可。</p></li></ol><h3 id="开启事务的方法中事务回滚的情况："><a href="#开启事务的方法中事务回滚的情况：" class="headerlink" title="开启事务的方法中事务回滚的情况："></a>开启事务的方法中事务回滚的情况：</h3><ul><li><p>未发现的异常，程序运行过程中自动抛出RuntimeException或者其子类，程序终止，自动回滚。</p></li><li><p>使用<code>TransactionAspectSupport.currentTransactionStatus().setRollbackOnly();</code>进行手动回滚。</p></li><li><p>注意：如果在try-catch语句中对可能出现的异常（RuntimeException）进行了处理，没有再手动throw异常，spring认为该方法成功执行，</p></li><li>不会进行回滚，此时需要进行手动回滚，另外，如果try-catch语句在finally中进行了return操作，那么catch中手动抛出的异常也会被覆盖，同样不会自动回滚。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//不会自动回滚</span></span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException();</span><br><span class="line">&#125;<span class="keyword">catch</span>(RuntimeException e)&#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//会自动回滚</span></span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException();</span><br><span class="line">&#125;<span class="keyword">catch</span>(RuntimeException e)&#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException();</span><br><span class="line">&#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="实际开发中一般是："><a href="#实际开发中一般是：" class="headerlink" title="实际开发中一般是："></a>实际开发中一般是：</h3><p>在controller层进行异常处理try-catch（因为controller的返回信息直接面向应用的使用人员  应该返回他们能读懂的信息），service层和dao层不进行异常处理，直接都向上抛出到controller中进行统一处理。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Springboot中使用事务的方式：&quot;&gt;&lt;a href=&quot;#Springboot中使用事务的方式：&quot; class=&quot;headerlink&quot; title=&quot;Springboot中使用事务的方式：&quot;&gt;&lt;/a&gt;Springboot中使用事务的方式：&lt;/h3&gt;&lt;ol&gt;

      
    
    </summary>
    
    
      <category term="springboot事务回滚" scheme="https://jianlin1993.github.io/tags/springboot%E4%BA%8B%E5%8A%A1%E5%9B%9E%E6%BB%9A/"/>
    
      <category term="手动回滚" scheme="https://jianlin1993.github.io/tags/%E6%89%8B%E5%8A%A8%E5%9B%9E%E6%BB%9A/"/>
    
      <category term="事务使用" scheme="https://jianlin1993.github.io/tags/%E4%BA%8B%E5%8A%A1%E4%BD%BF%E7%94%A8/"/>
    
      <category term="回滚" scheme="https://jianlin1993.github.io/tags/%E5%9B%9E%E6%BB%9A/"/>
    
      <category term="Transactional" scheme="https://jianlin1993.github.io/tags/Transactional/"/>
    
  </entry>
  
  <entry>
    <title>helloHEXO</title>
    <link href="https://jianlin1993.github.io/2019/05/06/helloHEXO/"/>
    <id>https://jianlin1993.github.io/2019/05/06/helloHEXO/</id>
    <published>2019-05-06T02:06:06.000Z</published>
    <updated>2019-05-06T02:06:06.811Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>testGit</title>
    <link href="https://jianlin1993.github.io/2019/05/05/testGit/"/>
    <id>https://jianlin1993.github.io/2019/05/05/testGit/</id>
    <published>2019-05-05T08:31:58.000Z</published>
    <updated>2019-05-06T06:19:02.644Z</updated>
    
    <content type="html"><![CDATA[<h3 id="试试markdown"><a href="#试试markdown" class="headerlink" title="试试markdown"></a>试试markdown</h3><h3 id="试试截"><a href="#试试截" class="headerlink" title="试试截"></a>试试截</h3><!--# ![](http://ztpx.oss-cn-beijing.aliyuncs.com/test/java%E9%9B%86%E5%90%88.jpg)截图-->]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;试试markdown&quot;&gt;&lt;a href=&quot;#试试markdown&quot; class=&quot;headerlink&quot; title=&quot;试试markdown&quot;&gt;&lt;/a&gt;试试markdown&lt;/h3&gt;&lt;h3 id=&quot;试试截&quot;&gt;&lt;a href=&quot;#试试截&quot; class=&quot;header
      
    
    </summary>
    
    
      <category term="testGit" scheme="https://jianlin1993.github.io/tags/testGit/"/>
    
      <category term="试试" scheme="https://jianlin1993.github.io/tags/%E8%AF%95%E8%AF%95/"/>
    
  </entry>
  
</feed>
