{"meta":{"title":"葬瞳飘血的博客","subtitle":null,"description":null,"author":"葬瞳飘血","url":"https://jianlin1993.github.io","root":"/"},"pages":[],"posts":[{"title":"SpringBoot事务使用","slug":"SpringBoot事务使用","date":"2019-05-06T09:25:57.000Z","updated":"2019-05-06T10:04:47.775Z","comments":true,"path":"2019/05/06/SpringBoot事务使用/","link":"","permalink":"https://jianlin1993.github.io/2019/05/06/SpringBoot事务使用/","excerpt":"","text":"Springboot中使用事务的方式： 启动类加上@EnableTransactionManagement注解，开启事务支持（其实默认是开启的）。 在使用事务的public（只有public支持事务）方法（或者类-相当于该类的所有public方法都使用）加上@Transactional注解。 在实际使用中一般是在service(业务层)中使用@Transactional，那么对于controller-&gt;service流程中： 如果controller未开启事务，service中开始了事务，service成功执行，controller在之后的运行中出现异常（错误），不会自动回滚。 也就是说，只有在开启事务的方法中出现异常（默认只有非检测性异常才生效-RuntimeException ）（错误-Error）才会自动回滚。 如果想要对抛出的任何异常都进行自动回滚（而不是只针对RuntimeException），只需要在使用@Transactional(rollbackFor = Exception.class)即可。 开启事务的方法中事务回滚的情况： 未发现的异常，程序运行过程中自动抛出RuntimeException或者其子类，程序终止，自动回滚。 使用TransactionAspectSupport.currentTransactionStatus().setRollbackOnly();进行手动回滚。 注意：如果在try-catch语句中对可能出现的异常（RuntimeException）进行了处理，没有再手动throw异常，spring认为该方法成功执行， 不会进行回滚，此时需要进行手动回滚，另外，如果try-catch语句在finally中进行了return操作，那么catch中手动抛出的异常也会被覆盖，同样不会自动回滚。12345678910111213141516//不会自动回滚try&#123; throw new RuntimeException();&#125;catch(RuntimeException e)&#123; e.printStackTrace();&#125;finally&#123;&#125; //会自动回滚try&#123; throw new RuntimeException();&#125;catch(RuntimeException e)&#123; e.printStackTrace(); throw new RuntimeException();&#125;finally&#123;&#125; 实际开发中一般是：在controller层进行异常处理try-catch（因为controller的返回信息直接面向应用的使用人员 应该返回他们能读懂的信息），service层和dao层不进行异常处理，直接都向上抛出到controller中进行统一处理。","categories":[],"tags":[{"name":"springboot事务回滚","slug":"springboot事务回滚","permalink":"https://jianlin1993.github.io/tags/springboot事务回滚/"},{"name":"手动回滚","slug":"手动回滚","permalink":"https://jianlin1993.github.io/tags/手动回滚/"},{"name":"事务使用","slug":"事务使用","permalink":"https://jianlin1993.github.io/tags/事务使用/"},{"name":"回滚","slug":"回滚","permalink":"https://jianlin1993.github.io/tags/回滚/"},{"name":"Transactional","slug":"Transactional","permalink":"https://jianlin1993.github.io/tags/Transactional/"}]},{"title":"helloHEXO","slug":"helloHEXO","date":"2019-05-06T02:06:06.000Z","updated":"2019-05-06T02:06:06.811Z","comments":true,"path":"2019/05/06/helloHEXO/","link":"","permalink":"https://jianlin1993.github.io/2019/05/06/helloHEXO/","excerpt":"","text":"","categories":[],"tags":[]},{"title":"testGit","slug":"testGit","date":"2019-05-05T08:31:58.000Z","updated":"2019-05-06T06:19:02.644Z","comments":true,"path":"2019/05/05/testGit/","link":"","permalink":"https://jianlin1993.github.io/2019/05/05/testGit/","excerpt":"","text":"试试markdown试试截","categories":[],"tags":[{"name":"testGit","slug":"testGit","permalink":"https://jianlin1993.github.io/tags/testGit/"},{"name":"试试","slug":"试试","permalink":"https://jianlin1993.github.io/tags/试试/"}]}]}