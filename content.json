{"meta":{"title":"葬瞳飘血的博客","subtitle":null,"description":null,"author":"葬瞳飘血","url":"https://jianlin1993.github.io","root":"/"},"pages":[{"title":"about","date":"2019-05-08T02:56:08.000Z","updated":"2019-05-08T02:56:08.252Z","comments":true,"path":"about/index.html","permalink":"https://jianlin1993.github.io/about/index.html","excerpt":"","text":""},{"title":"tags","date":"2019-05-08T02:56:00.000Z","updated":"2019-05-08T02:56:00.814Z","comments":true,"path":"tags/index.html","permalink":"https://jianlin1993.github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"SpringBoot事务使用","slug":"SpringBoot事务使用","date":"2019-05-06T09:25:57.000Z","updated":"2019-05-07T07:35:13.954Z","comments":true,"path":"2019/05/06/SpringBoot事务使用/","link":"","permalink":"https://jianlin1993.github.io/2019/05/06/SpringBoot事务使用/","excerpt":"","text":"¶Springboot中使用事务的方式： 启动类加上@EnableTransactionManagement注解，开启事务支持（其实默认是开启的）。 在使用事务的public（只有public支持事务）方法（或者类-相当于该类的所有public方法都使用）加上@Transactional注解。 在实际使用中一般是在service(业务层)中使用@Transactional，那么对于controller-&gt;service流程中： 如果controller未开启事务，service中开始了事务，service成功执行，controller在之后的运行中出现异常（错误），不会自动回滚。 也就是说，只有在开启事务的方法中出现异常（默认只有非检测性异常才生效-RuntimeException ）（错误-Error）才会自动回滚。 如果想要对抛出的任何异常都进行自动回滚（而不是只针对RuntimeException），只需要在使用@Transactional(rollbackFor = Exception.class)即可。 ¶开启事务的方法中事务回滚的情况： 未发现的异常，程序运行过程中自动抛出RuntimeException或者其子类，程序终止，自动回滚。 使用TransactionAspectSupport.currentTransactionStatus().setRollbackOnly();进行手动回滚。 注意：如果在try-catch语句中对可能出现的异常（RuntimeException）进行了处理，没有再手动throw异常，spring认为该方法成功执行， 不会进行回滚，此时需要进行手动回滚，另外，如果try-catch语句在finally中进行了return操作，那么catch中手动抛出的异常也会被覆盖，同样不会自动回滚。 12345678910111213141516//不会自动回滚try&#123; throw new RuntimeException();&#125;catch(RuntimeException e)&#123; e.printStackTrace();&#125;finally&#123;&#125;//会自动回滚try&#123; throw new RuntimeException();&#125;catch(RuntimeException e)&#123; e.printStackTrace(); throw new RuntimeException();&#125;finally&#123;&#125; ¶实际开发中一般是： 在controller层进行异常处理try-catch（因为controller的返回信息直接面向应用的使用人员,应该返回他们能读懂的信息),service层和dao层不进行异常处理，直接都向上抛出到controller中进行统一处理。","categories":[],"tags":[{"name":"springboot事务回滚","slug":"springboot事务回滚","permalink":"https://jianlin1993.github.io/tags/springboot事务回滚/"},{"name":"Transactional","slug":"Transactional","permalink":"https://jianlin1993.github.io/tags/Transactional/"}]},{"title":"helloHEXO","slug":"helloHEXO","date":"2019-05-06T02:06:06.000Z","updated":"2019-05-07T07:48:42.301Z","comments":true,"path":"2019/05/06/helloHEXO/","link":"","permalink":"https://jianlin1993.github.io/2019/05/06/helloHEXO/","excerpt":"","text":"1234567//不会自动回滚try&#123; throw new RuntimeException();&#125;catch(RuntimeException e)&#123; e.printStackTrace();&#125;finally&#123;&#125;","categories":[],"tags":[]},{"title":"","slug":"testGit","date":"2019-05-05T08:31:58.110Z","updated":"2019-05-08T01:59:21.523Z","comments":true,"path":"2019/05/05/testGit/","link":"","permalink":"https://jianlin1993.github.io/2019/05/05/testGit/","excerpt":"","text":"markdown - 更简洁、更高效 ================================================= 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071package com.demo.bill1.service;import com.demo.bill1.domain.Bill;import com.demo.bill1.mapper.BillMapper;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Service;import org.springframework.transaction.annotation.Propagation;import org.springframework.transaction.annotation.Transactional;import org.springframework.transaction.interceptor.TransactionAspectSupport;import javax.annotation.Resource;import java.io.IOException;import java.util.ArrayList;import java.util.List;@Service@Transactionalpublic class BillService &#123; @Autowired private BillMapper billMapper; @Autowired private Bill bill; public List&lt;Bill&gt; getAll(String s)&#123;33s=\"1\"; //修改一下提交试试 List&lt;Bill&gt; list=new ArrayList&lt;&gt;(); list=billMapper.getAll(); return list; &#125;; public Bill sfByNo(int no)&#123; bill=billMapper.sfByNo(no); return bill; &#125;; public int add()&#123; Bill bill=new Bill(); bill.setTxTyp(\"1\"); bill.setRemark(\"试试影响行数\"); int rsp=billMapper.add(bill); System.out.println(rsp); System.out.println(\"try模块\"); rsp+=billMapper.add(bill); return rsp;// System.out.println(rsp); &#125; public int testException ()&#123;System.out.println(\"调用service\"); int rsp=1; try&#123; throw new OutOfMemoryError(\"内存溢出\"); &#125;catch(ArrayIndexOutOfBoundsException e)&#123; System.out.println(\"catch 语句\"); e.printStackTrace(); &#125;finally&#123; return rsp; &#125;// System.out.println(rsp); &#125;&#125; 强烈建议开发者认真阅读本文档，掌握md及HBuilderX对md的强大支持。 如果没有点右键设置自动换行，可按Alt+滚轮横向滚动查看。 很多人只把markdown用于网络文章发表，这糟蹋了markdown。 markdown不止是HTML的简化版，更重要的是txt的升级版、word的轻量版、笔记的最佳载体。 作为一种简单的格式标记语言，不同于txt的无格式，不同于HTML的复杂标记，也不同于word的鼠标调整样式。markdown通过简单的几个字符键入，就可以快捷的定义文档的样式。 比如在行首敲一个“#”，就把这行定义为了1级标题，并且在HBuilderX里有直观完善的着色，这样无需发布为web页面，可直接当word用。 掌握markdown，你可以完全抛弃txt和笔记软件的编辑器，并且在大多数场景下替代掉复杂臃肿的word。享受简洁之美、享受效率提升。 而HBuilderX，可以被称为最强大的markdown书写工具了。 下面的示例列举了markdown语法及对应的HBuilderX使用技巧： 开始前，可以先按下文档结构图的快捷键Alt+w（Mac是Ctrl+w），浏览本文的大纲。 标题语法 markdown的标题是行首以#号开头，空格分割的，不同级别的标题，在HX里着色也不同。如下： 标题1 ¶标题2 ¶标题3 ¶标题4 ¶标题5 ¶标题6 标题使用技巧： Emmet快速输入：敲h2+Tab即可生成二级标题【同HTML里的emmet写法，不止标题，HX里所有可对应tag的markdown语法均支持emmet写法】。仅行首生效 智能双击：双击#号可选中整个标题段落 智能回车：行尾回车或行中Ctrl+Enter强制换行后会自动在下一行补#。而连续2次回车后将自动补的#去掉。(体验同word) 回车后再次按Tab可递进一层标题，再按Tab切换列表符 在# 后回车，可上插一个空标题行【同word】，或任意位置按Ctrl+Shift+Enter也可以上插空标题行 折叠： 点标题前的-号可折叠该标题段落，快捷键是Alt±（展开折叠是Alt+=） 多层折叠时折叠或展开子节点，快捷键是Alt+Shift±或= 全文全部折叠或展开，快捷键是Ctrl+Alt+Shift±或= 折叠其他区域，快捷键是Alt+Shift+o。这对长文档管理非常有用，可以专注于当前章节 可以在菜单-跳转-折叠中随时找到这些功能 列表 markdown的列表支持有序列表、无序列表以及特殊的任务列表。 同样也是在行前加一个特殊符号，并空格后再跟列表文字内容。 ¶有序列表 有序列表就是有顺序的列表，依靠行前的数字标记顺序。 有序列表1 【设置或取消有序列表符的快捷键：Ctrl+Alt+1，可选中多行批量设置序号；支持多光标批量设置列表符，即按Ctrl+鼠标左键添加多光标】 有序列表2 【列表后回车会自动补序号】 有序列表3 【智能双击：双击前面的数字，可重新对数字排序，修正序号错误，并选中有序列表段落（左边的4是故意写错让你体验的）】 ¶无序列表 无序列表就是列表不排序，无序列表因书写随意而被更广泛的使用。 无序列表有3种前缀，HX里分别用于表示1级列表、2级列表、3级列表。 无序列表1 【快捷键：Ctrl+Alt±；智能双击：双击-号可选中整段无序列表；再次按Tab会更换二级列表符】 无序列表2 Emmet：li后敲Tab可生成*号列表符，行首生效 快捷键：Ctrl+Alt+8【8即*对应的数字】，支持多光标批量设置列表符，即按Ctrl+鼠标左键添加多光标 智能双击：双击*号可选中整段无序列表 智能回车：行尾回车或行中Ctrl+Enter强制换行后会自动续列表；连续按回车会清除列表符；再次按Tab会更换列表符；在列表符后回车或行尾Shift+回车，上一行留出列表符 *号常用于二级列表，列表符后继续Tab，可切换列表符 无序列表3 【快捷键：Ctrl+Alt+=；常用于三级列表；其他同上】 ¶任务列表 任务列表非常实用，管理待办已办非常便利。 [ ] 任务列表-未完成任务 【快捷键：Ctrl+Alt+[】 [x] 任务列表-已完成任务 【快捷键：Ctrl+Alt+]】 1. 智能双击：双击方括号内可切换勾选状态，把任务标记为完成或未完成；双击方括号右侧可选中任务列表段落 2. 智能回车：回车后自动补任务列表前缀符号；连续按回车清除前缀符号；在列表符后回车或行尾Shift+回车，上一行留出列表符 以上三种列表，均支持批量修改列表符，有如下方式建议依次学习尝试： 选中多行，按快捷键Ctrl+Alt+“1”或“-”或“[”或“]”，批量设置列表符 如果需要跳行设置有序或无序列表，通过Ctrl+鼠标左键点中目标多行（可不连续），产生多光标，然后按快捷键Ctrl+Alt+“1”或“-”或“[”或“]”，可跳行设置列表符，尤其是有序列表，数字也会跳行加1 按Alt+鼠标选中行首那列（列选择），这样每行行首都有光标，然后再键入或删除列表符即可批量操作 选中多行，按快捷键Ctrl+Shift+\\（其实就是Ctrl+|），可以在每行行首添加一个光标 ¶引用列表 引用1 引用2 快捷键：Ctrl+Alt+Shift+. 智能双击：双击&gt;号可选中整段引用列表 智能回车：行尾回车或行中Ctrl+Enter强制换行后会自动续列表；连续按回车会清除列表符；在列表符后回车或行尾Shift+回车，上一行留出列表符 文字样式语法 加粗 【快捷键：Ctrl+B，支持多光标；Emmet：b后敲Tab】 加粗2 倾斜【Emmet：i后敲Tab；前后包围：选中文字按Ctrl+\\是在选区两侧添加光标，可以继续输入_】 倾斜 删除线 包围插入：先选中文字内容，然后按_*~`等符号，会自动在2侧加包围 智能双击：双击语法区前面的定义符号，选中包含定义符的整段文字 去包围：选中整段文字后，按Ctrl+Shift+]，可去除2侧包围符号 引号括号虽然不属于markdown语法，但也支持相同的包围、选择、去包围操作。 引号括号智能双击选择时略特殊的是：双击引号括号内侧，选中引号括号里的内容(不含引号括号)；按下Alt+双击引号括号内侧，则选中包含符号的整段文字 HBuilderX还支持以下对2侧文本高效处理的手段 选中文字按Ctrl+\\是在选区两侧添加光标，可以继续输入~~，会在2侧同时输入 向2侧扩大选择：【Win:Alt+Shit+→ 、Mac:CtrlShit+→】；由2侧向内减少选择：【Win:Alt+Shit+← 、Mac:CtrlShit+←】 链接文字 Emmet：a后敲Tab 打开链接：Alt+鼠标单击；如果是本地文件，可通过Shift+Alt+单击，在另一分栏打开文件 智能粘贴：粘贴URL会自动变成超链接格式；粘贴本地文件进来也会自动创建引用链接 智能双击：双击语法区开头，即[左侧，选中包含定义符的整段文字 Emmet：img后敲Tab 智能粘贴：粘贴剪切板里的图形时会自动保存为本md文档的附件；删除文档中的图片语法，保存md文档时会自动删除对应的图片附件；粘贴图片文件时自动变成链接引用格式； 悬浮预览：鼠标移到图片语法上，本地图片会自动显示出来 智能双击：双击语法区开头，即!左侧，选中包含定义符的整段文字 表格 | | | | |-- |-- |-- | | | | | | | | | Emmet：table3*3后敲Tab，表示生成3行3列的表格，行首生效 md表格对齐是传统md的痛点，HBuilderX按下Ctrl+K可以自动整理表格格式（暂未兼容不同缩放模式和字体的情况） 支持从excel、wps、word、number的表格中复制粘贴表格进来（不支持合并单元格和单元格换行） 分割线 ------------- 【Emmet：hr后敲Tab】 ============= 代码区 1var a = document Emmet：code后敲Tab，行首生效 智能双击：双击语法区开头，即!左侧，选中包含定义符的整段文字 注释 快捷键：Ctrl+/ 智能双击：双击注释首尾的定义符，选中整段注释 其他emmet快捷输入 day后敲Tab，当前日期。注意day需在行首或前面有空格 time后敲Tab，当前时间。注意time需在行首或前面有空格 文档结构图 文章很长时，word里有文档结构图，HBuilderX也有。 菜单视图-文档结构图，快捷键Alt+W(mac是ctrl+W)，轻松管理长文档 运行、预览和打印PDF 对md文件点工具栏或菜单里的浏览器运行，可以使用外部浏览器预览此md文件，会自动渲染为HTML。 点右上角的预览【快捷键Alt+p】，可在HBuilderX右侧预览该md文档的HTML渲染结果。 在浏览器中点打印，选择打印到PDF，可将md输出为PDF格式。（注意在打印选项里去掉页眉页脚） 其他常用但你可能不知道的快捷操作技巧 Ctrl+鼠标左键添加多光标，然后敲字或粘贴，可批量处理。Ctrl+鼠标左键拖选，可选中多个选区。 Ctrl+鼠标右键删除多光标 不选内容按Ctrl+C或X可复制或剪切整行 选中2个选区后，按Ctrl+Shift+X，可互换选区内容。如无选区，只是2个光标，则互换2行 Ctrl+上下键可上下移动行 Ctrl+Insert可重复插入当前行，如果有选中内容，可重复插入选中内容 Ctrl+Shift+K可合并多行（是格式化Ctrl+K的反操作） 删除 按Ctrl+D可删除选中行，支持多光标 Shift+Del删除到行尾 Shift+Backspace删除到行首 选择 Ctrl+E选相同词(mac是Command+D)，连续按可选中多词进一步操作，比替换更方便 Ctrl+L可连选多行，Ctrl+Shift+L也是选择行，但不选行首尾的空白字符 Ctrl+=可逐级放大选区 双击标题、列表符可选中相应段落 双击英文引号、括号内侧，可选中内部内容 双击缩进符，可选中同缩进段落 双击连字符比如-或_，可选中相连的词，比如双击这里试试，uni-app 查找 Ctrl+P查找文件 Ctrl+Alt+F可在当前目录的所有文档中搜索指定关键字(mac是Command+Shift+f) 选中文字按F3，查找下一个，Shift+F3找上一个 云同步：HBuilderX+markdown用于云同步笔记的技巧，请参考http://ask.dcloud.net.cn/article/13097 都学会了吗？ markdown语法其实很简单，认真学半小时就能掌握。 HBuilderX的极客操作则需要不停反复练习，熟练掌握这些技巧，你将成为高效极客！","categories":[],"tags":[]}]}